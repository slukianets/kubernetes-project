Description:  This template deploys a kubernetes cluster from scratch with a VPC and EC2 ...

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: Kube-Cluster

  VpcIPrange:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1IPrange:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.10.0/24

  PublicSubnet2IPrange:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.11.0/24

  PrivateSubnet1IPrange:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.20.0/24

  PrivateSubnet2IPrange:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.21.0/24

  DBSubnet1IPrange:
    Description: Please enter the IP range (CIDR notation) for the DB subnet in the first Availability Zone
    Type: String
    Default: 10.0.30.0/24

  DBSubnet2IPrange:
    Description: Please enter the IP range (CIDR notation) for the DB subnet in the second Availability Zone
    Type: String
    Default: 10.0.31.0/24

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Default: kube-test.pem

  SSHIPaddress:
     Description: The IP address range that can be used to SSH to the EC2 instances. Must be a valid IP CIDR range of the form x.x.x.x/x.
     Type: String
     MinLength: 9
     MaxLength: 18
     Default: 0.0.0.0/0
     AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})

  InstanceTypeParameter:
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
    Description: Enter t2.medium, t2.large, or t2.xlarge. Default is t2.medium.

  ImageIDType:
    Description: Default Europe (Frankfurt) eu-central-1 region. Ubuntu ImageID
    Type: String
    Default: ami-0d359437d1756caa8

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcIPrange
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1IPrange
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2IPrange
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1IPrange
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2IPrange
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref DBSubnet1IPrange
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} DB Subnet (AZ1)

  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref DBSubnet2IPrange
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} DB Subnet (AZ2)

  NatGateway1ElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2ElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  DBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} DB Routes


  DBSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBRouteTable
      SubnetId: !Ref DBSubnet2


  KubeClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Kubernetes ports allow + ssh
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 30000
        ToPort: 32767
        CidrIp: 10.0.0.0/16
        Description: NodePort Services
      - IpProtocol: tcp
        FromPort: 6443
        ToPort: 6443
        CidrIp: 10.0.0.0/16
        Description: Kubernetes API server
      - IpProtocol: tcp
        FromPort: 2379
        ToPort: 2380
        CidrIp: 10.0.0.0/16
        Description: etcd server client API
      - IpProtocol: tcp
        FromPort: 10251
        ToPort: 10251
        CidrIp: 10.0.0.0/16
        Description: kube scheduler
      - IpProtocol: tcp
        FromPort: 10250
        ToPort: 10250
        CidrIp: 10.0.0.0/16
        Description: Kubelet API
      - IpProtocol: tcp
        FromPort: 10252
        ToPort: 10252
        CidrIp: 10.0.0.0/16
        Description: kube controller manager
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHIPaddress
        Description: ssh
      - IpProtocol: tcp
        FromPort: 6783
        ToPort: 6783
        CidrIp: 10.0.0.0/16
        Description: Weave Net
      - IpProtocol: udp
        FromPort: 6783
        ToPort: 6784
        CidrIp: 10.0.0.0/16
        Description: Weave Net
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
        Description: HTTPS
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        Description: HTTP
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  MasterEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: KubeClusterSecurityGroup
    Properties:
        ImageId: !Ref ImageIDType
        KeyName: !Ref KeyName
        InstanceType: !Ref InstanceTypeParameter
        SecurityGroupIds: [ !GetAtt KubeClusterSecurityGroup.GroupId ]
        SubnetId: !Ref PublicSubnet1
        BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 15
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash -xe
              hostnamectl set-hostname --static k8s-master; reboot;
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}-master

  Worker1EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: KubeClusterSecurityGroup
    Properties:
        ImageId: !Ref ImageIDType
        KeyName: !Ref KeyName
        InstanceType: !Ref InstanceTypeParameter
        SecurityGroupIds: [ !GetAtt KubeClusterSecurityGroup.GroupId ]
        SubnetId: !Ref PublicSubnet1
        BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 15
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash -xe
              hostnamectl set-hostname --static k8s-node01; reboot;
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}-worker1

  Worker2EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: KubeClusterSecurityGroup
    Properties:
        ImageId: !Ref ImageIDType
        KeyName: !Ref KeyName
        InstanceType: !Ref InstanceTypeParameter
        SecurityGroupIds: [ !GetAtt KubeClusterSecurityGroup.GroupId ]
        SubnetId: !Ref PublicSubnet2
        BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 15
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash -xe
              hostnamectl set-hostname --static k8s-node02; reboot;
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}-worker2


Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  DBSubnet1:
    Description: A reference to the DB subnet in the 1st Availability Zone
    Value: !Ref DBSubnet1

  DBSubnet2:
    Description: A reference to the DB subnet in the 2nd Availability Zone
    Value: !Ref DBSubnet2

  KubeClusterSecurityGroup:
    Description: Security group with Kubernetes port + ssh
    Value: !Ref KubeClusterSecurityGroup

  MasterEC2Instance:
    Description: A reference to the EC2 Master public IP address
    Value: !GetAtt MasterEC2Instance.PublicIp

  Worker1EC2Instance:
    Description: A reference to the EC2 Worker1 public IP address
    Value: !GetAtt Worker1EC2Instance.PublicIp

  Worker2EC2Instance:
    Description: A reference to the EC2 Worker2 public IP address
    Value: !GetAtt Worker2EC2Instance.PublicIp
